#include <iostream>
#include <fstream>
#include <vector>
#include <cmath>

class Monkey
{
public:
Monkey(){};
Monkey(std::vector<int> ite,int testdiv)
{
    items=ite;
    testdivisible=testdiv;
    timesInspected=0;
};
bool Test()
{
    if(items.at(0)%testdivisible==0)return true;
     return false;
};
virtual void Operation()=0;
void setTrueAndFalseMonkey(Monkey* monkeyTrue,Monkey* monkeyFalse)
{
    trueThrow=monkeyTrue;
    falseThrow=monkeyFalse;
};


void throwTrue()
{
    int itemThrow=items.at(0);
    std::cout<<"throw true: "<<items.at(0)<<std::endl;
    items.erase(items.begin());
    trueThrow->catchItem(itemThrow);
}

void throwFalse()
{
    int itemThrow=items.at(0);
    std::cout<<"throw false: "<<items.at(0)<<std::endl;
    items.erase(items.begin());
    falseThrow->catchItem(itemThrow);
}

void catchItem(int newItem)
{
    items.push_back(newItem);
}
int showInspectedCount()
{
    return timesInspected;
}
std::vector<int> items;

void showItems()
{
    std::cout<<"\n";
    for(auto it:items)
    {
        std::cout<<it<<"  ";
    }
}

protected:
int testdivisible;
Monkey* trueThrow;
Monkey* falseThrow;
int timesInspected;
};

class MonkeyMultiplication: public Monkey
{
public:
MonkeyMultiplication(std::vector<int> ite,int testdiv, int multiscore):Monkey(ite,testdiv)
{
    multiScore=multiscore;
};

void Operation() override
{
    items.at(0)=items.at(0)*multiScore;
    timesInspected++;
    items.at(0)=items.at(0)/3;
}
protected:
int multiScore;
};

class MonkeyAdd: public Monkey
{
public:
MonkeyAdd(std::vector<int> ite,int testdiv, int addscore):Monkey(ite,testdiv)
{
   addScore=addscore;
};

void Operation() override
{
    items.at(0)=items.at(0)+addScore;
    timesInspected++;
    items.at(0)=items.at(0)/3;
}
protected:
int addScore;
};

class MonkeySquare: public Monkey
{
public:
MonkeySquare(std::vector<int> ite,int testdiv):Monkey(ite,testdiv)
{};
void Operation() override
{
    items.at(0)=items.at(0)*items.at(0);
    timesInspected++;
    items.at(0)=items.at(0)/3;
}
};

std::vector<Monkey*> prepareMonkeysStartData()
{
    std::vector<Monkey*> monkeys;
//  Monkey* temp0=new MonkeyMultiplication({79,98},23,19);
//   Monkey* temp1=new MonkeyAdd({54,65,75,74},19,6);
//  Monkey* temp2=new MonkeySquare({79,60,97},13);
//   Monkey* temp3=new MonkeyAdd({74},17,3);
// temp0->setTrueAndFalseMonkey(temp2,temp3);
// temp1->setTrueAndFalseMonkey(temp2,temp0);
// temp2->setTrueAndFalseMonkey(temp1,temp3);
// temp3->setTrueAndFalseMonkey(temp0,temp1);



Monkey* temp0=new MonkeyMultiplication({50,70,54,83,52,78},11,3);
Monkey* temp1=new MonkeySquare({71,52,58,60,71},7);
Monkey* temp2=new MonkeyAdd({66,56,56,94,60,86,73},3,1);
Monkey* temp3=new MonkeyAdd({83,99},5,8);
Monkey* temp4=new MonkeyAdd({98,98,79},17,3);
Monkey* temp5=new MonkeyAdd({76},13,4);
Monkey* temp6=new MonkeyMultiplication({52,51,84,54},19,17);
Monkey* temp7=new MonkeyAdd({82,86,91,79,94,92,59,94},2,7);
temp0->setTrueAndFalseMonkey(temp2,temp7);
temp1->setTrueAndFalseMonkey(temp0,temp2);
temp2->setTrueAndFalseMonkey(temp7,temp5);
temp3->setTrueAndFalseMonkey(temp6,temp4);
temp4->setTrueAndFalseMonkey(temp1,temp0);
temp5->setTrueAndFalseMonkey(temp6,temp3);
temp6->setTrueAndFalseMonkey(temp4,temp1);
temp7->setTrueAndFalseMonkey(temp5,temp3);
monkeys.push_back(temp0);
monkeys.push_back(temp1);
monkeys.push_back(temp2);
monkeys.push_back(temp3);
monkeys.push_back(temp4);
monkeys.push_back(temp5);
monkeys.push_back(temp6);
monkeys.push_back(temp7);
return monkeys;
}

void makeTurn(std::vector<Monkey*> monkeys)
{
    for(auto monkey:monkeys){
        int temp=monkey->items.size();
        for(int i=0;i<temp;i++)
        {
            monkey->Operation();
            if(monkey->Test())monkey->throwTrue();
            else monkey->throwFalse();
        }
    };
}

int main()
{
std::vector<Monkey*> monkeys=prepareMonkeysStartData();
for(int i=0;i<20;i++)
{
 makeTurn(monkeys);
}
for(auto monkey:monkeys)
{
    //monkey->showItems();
    std::cout<<monkey->showInspectedCount()<<"\n";
}
    return 0;
}

