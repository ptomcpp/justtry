#include <iostream>
#include <fstream>
#include <vector>


std::vector<std::string> readInputFile()
{
    std::vector<std::string> treesHeight;
    std::fstream answerFile;
    answerFile.open("treesHeight.txt");
    std::string line;
    while (getline(answerFile, line))
    {
     treesHeight.push_back(line);
    }
    return treesHeight;
}

 void convertToTable(std::vector<std::string>& inputFile, std::vector<std::vector<int>>& treesHeight)
{
for(int i=0;i<99;i++)
{
    std::vector<int> treesRow;
    for(auto letter:inputFile.at(i))
    {
        treesRow.push_back(letter-'0');
    }
    treesHeight.push_back(treesRow);
}
}



int checkVisibilityUp(std::vector<std::vector<int>>& treesHeight,int posX,int posY,int targetHeight)
{
    int visible=0;
    std::cout<<" POSITION X:"<<posX<<" POSITION Y: "<<posY<<std::endl;
    for(int i=posY-1;i>=0;i--)
    {

        if(targetHeight>treesHeight.at(i).at(posX))
        {
            visible++;
        }
        else
        {
            visible++;
            i=0;
        }
        
    }
    std::cout<<"checking Up "<<posX<<" "<<posY<<" "<<targetHeight<<"  "<<std::max(1,visible)<<"\n";
    return std::max(1,visible);
}
int checkVisibilityDown(std::vector<std::vector<int>>& treesHeight,int posX,int posY,int targetHeight)
{
    int  visible=0;
    for(int i=posY+1;i<=treesHeight.size()-1;i++)
    {
        if(targetHeight>treesHeight.at(i).at(posX))
        {
        visible++;
        }
        else
        {
            visible++;
            i=treesHeight.size()+1;
        }
    }
    std::cout<<"checking Down "<<posX<<" "<<posY<<" "<<targetHeight<<"  "<<std::max(1,visible)<<"\n";
    return std::max(1,visible);
}
int checkVisibilityLeft(std::vector<std::vector<int>>& treesHeight,int posX,int posY,int targetHeight)
{
    int visible=0;
    for(int i=posX-1;i>=0;i--)
    {
        if(targetHeight>treesHeight.at(posY).at(i))
        {
        visible++;
        }
        else
        {
            visible++;
            i=-1;
        }
        
    }
    std::cout<<"checking Left "<<posX<<" "<<posY<<" "<<targetHeight<<"  "<<std::max(1,visible)<<"\n";
    return std::max(1,visible);
}
int checkVisibilityRight(std::vector<std::vector<int>>& treesHeight,int posX,int posY,int targetHeight)
{
    int visible=0;
    for(int i=posX+1;i<=treesHeight.size()-1;i++)
    {
        if(targetHeight>treesHeight.at(posY).at(i))
        {
        visible++;
        }
        else
        {
            visible++;
            i=treesHeight.size()+1;
        }
        
    }
    std::cout<<"checking Right "<<posX<<" "<<posY<<" "<<targetHeight<<"  "<<std::max(1,visible)<<"\n";
    return std::max(1,visible);
    
}

int checkVisibility(std::vector<std::vector<int>>& treesHeight,int posX,int posY)
{
int targetHeight=treesHeight.at(posY).at(posX);
return ((checkVisibilityUp(treesHeight,posX,posY,targetHeight))*(checkVisibilityDown(treesHeight,posX,posY,targetHeight))*(checkVisibilityLeft(treesHeight,posX,posY,targetHeight))*(checkVisibilityRight(treesHeight,posX,posY,targetHeight)));
}

int countNonVisibleTrees(std::vector<std::vector<int>>& treesHeight)
{
int maxVisibility{};
for(int i=0;i<treesHeight.size();i++)
{
    for(int j=0;j<treesHeight.size();j++)
    {
        if(checkVisibility(treesHeight,i,j)>maxVisibility)
        if(checkVisibility(treesHeight,i,j)>maxVisibility)
        {maxVisibility=checkVisibility(treesHeight,i,j);
        }
    }
}
return maxVisibility;
}

int main()
{
// std::vector<std::vector<int>> treesHeight;
// std::vector<std::string> inputTreesHeight=readInputFile();
// convertToTable(inputTreesHeight,treesHeight);
std::vector<std::vector<int>> treesHeight;
std::vector<int> vec1={3,0,3,7,3};
std::vector<int> vec2={2,5,5,1,2};
std::vector<int> vec3={6,5,3,3,2};
std::vector<int> vec4={3,3,5,4,9};
std::vector<int> vec5={3,5,3,8,0};
treesHeight.push_back(vec1);
treesHeight.push_back(vec2);
treesHeight.push_back(vec3);
treesHeight.push_back(vec4);
treesHeight.push_back(vec5);
std::cout<<countNonVisibleTrees(treesHeight);
    return 0;
}
